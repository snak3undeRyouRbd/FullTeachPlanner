### app/routes/events.py
from flask import request, jsonify
from app import db
from app.models.event import Event
from app.models.user import User
from app.routes import main

@main.route('/api/events', methods=['POST'])
def create_event():
    data = request.get_json()
    creator_id = data.get('creator_id')
    if not User.query.get(creator_id):
        return jsonify({'error': 'Creator user not found'}), 404

    event = Event(
        type=data.get('type'),
        title=data.get('title'),
        start_date=data.get('start_date'),
        duration=data.get('duration'),
        content=data.get('content'),
        is_hidden=data.get('is_hidden', True),
        location=data.get('location'),
        creator_id=creator_id
    )
    db.session.add(event)
    db.session.commit()
    return jsonify(event.to_dict()), 201

@main.route('/api/events', methods=['GET'])
def get_events():
    events = Event.query.all()
    return jsonify([event.to_dict() for event in events])


### app/routes/tasks.py
from flask import request, jsonify
from app import db
from app.models.task import Task
from app.models.user import User
from app.routes import main

@main.route('/api/tasks', methods=['POST'])
def create_task():
    data = request.get_json()

    assigned_to = data.get('assigned_to')
    if assigned_to and not User.query.get(assigned_to):
        return jsonify({'error': 'Assigned user not found'}), 404

    task = Task(
        title=data.get('title'),
        content=data.get('content'),
        status=data.get('status', 'pending'),
        due_date=data.get('due_date'),
        event_id=data.get('event_id'),
        assigned_to=assigned_to
    )
    db.session.add(task)
    db.session.commit()
    return jsonify(task.to_dict()), 201


### app/routes/users.py
from flask import request, jsonify
from app import db
from app.models.user import User
from app.routes import main

@main.route('/api/users', methods=['POST'])
def create_user():
    data = request.get_json()
    if User.query.filter_by(email=data.get('email')).first():
        return jsonify({'error': 'User with this email already exists'}), 400

    user = User(
        role=data.get('role'),
        name=data.get('name'),
        surname=data.get('surname'),
        email=data.get('email'),
        birthday=data.get('birthday'),
        additional_info=data.get('additional_info'),
        profile_photo=data.get('profile_photo'),
        badge=data.get('badge')
    )
    db.session.add(user)
    db.session.commit()
    return jsonify(user.to_dict()), 201
